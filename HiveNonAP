local modem = peripheral.find("modem")
local name = ""
local rqst = "step"
local arg2 = 2
local next = next

local tree = { 
    replaceMeWithATurtleName = { -- IMPORTANT: For now, the first index must be a goodbye option. Meaning that you'll use this to end the conversation. Even if you don't use it, leave it as 0,0.
        fill = {{32,""},{},{"Error: Missing button label"}},--{Text color, response string}{target IDs}{button labels}
        {"","",0,0},
        {"","Example greeting",1,2},
        {"Replace me with a player option!", "Response 1. Replace me with a turtle response!", 2, 2},
        {"Replace me with a player option!", "Replace me with a turtle response!", 2, 2},
        {"Replace me with a player option!", "Replace me with a turtle response!", 2, 2}
    }
}

local function msgWait()
    local event, side, frequency, replyFrequency, message, distance = os.pullEvent("modem_message")
    name, rqst, arg2 = string.match(message, "(%a+)%s*(%a+)%s*(%d+)")
    arg2 = tonumber(arg2)
    return name, rqst, arg2
end

while true do
    local name, rqst, arg2 = msgWait()
    if rqst == "step" then
        tree[name].fill[1][2] = tree[name][arg2][2]
        if next(tree[name][2]) ~= nil then
            for i=1, #tree[name].fill[2] do tree[name].fill[2][i] = nil end
        end
        local count = 0
        for i = 1, #tree[name] do--Generate target ID table
            if tree[name][i][3] == tree[name][arg2][4] then
                tree[name].fill[2][1+count] = i
                count = count + 1
            end
        end
        if next(tree[name][3]) ~= nil then
            for i=0, #tree[name].fill[3] do tree[name].fill[3][i] = nil end
        end
        local count = 0
        for i = 1, #tree[name].fill[2] do --Add button labels
            tree[name].fill[3][1+count] = tree[name][tree[name].fill[2][i]][1]
            count = count + 1
        end
        modem.transmit(42, 42, tree[name].fill)
    end
end
